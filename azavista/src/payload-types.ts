/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {};
  collections: {
    users: User;
    media: Media;
    navbar: Navbar;
    footer: Footer;
    pages: Page;
    blogs: Blog;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    navbar: NavbarSelect<false> | NavbarSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    blogs: BlogsSelect<false> | BlogsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt?: string | null;
  /**
   * Cloudinary public ID
   */
  cloudinaryId?: string | null;
  /**
   * Public URL for this media file
   */
  publicUrl?: string | null;
  /**
   * Cloudinary Media Information
   */
  cloudinary?: {
    /**
     * Cloudinary Public ID (used for transformations)
     */
    public_id?: string | null;
    /**
     * Type of the resource (image, video, raw)
     */
    resource_type?: string | null;
    /**
     * File format
     */
    format?: string | null;
    /**
     * Secure delivery URL
     */
    secure_url?: string | null;
    /**
     * File size in bytes
     */
    bytes?: number | null;
    /**
     * Creation timestamp
     */
    created_at?: string | null;
    /**
     * Current version number
     */
    version?: string | null;
    /**
     * Unique version identifier
     */
    version_id?: string | null;
    /**
     * Width in pixels
     */
    width?: number | null;
    /**
     * Height in pixels
     */
    height?: number | null;
    /**
     * Duration in seconds (for videos)
     */
    duration?: number | null;
    /**
     * Number of pages (for PDFs)
     */
    pages?: number | null;
    /**
     * Which page of the PDF to use for thumbnails (changes will apply after saving)
     */
    selected_page?: number | null;
    /**
     * URL for the thumbnail image (automatically generated for PDFs)
     */
    thumbnail_url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
  /**
   * Cloudinary URL will be populated automatically
   */
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar".
 */
export interface Navbar {
  id: number;
  label: string;
  logo: number | Media;
  /**
   * URL for the logo to redirect to (e.g., / for home page)
   */
  logoUrl?: string | null;
  ctaLabel?: string | null;
  ctaUrl?: string | null;
  /**
   * Make menu items for the navbar.
   */
  menuItems?:
    | {
        label: string;
        order?: number | null;
        /**
         * Optional left highlight card
         */
        highlight?: {
          title?: string | null;
          description?: string | null;
          linkText?: string | null;
          link?: string | null;
          image?: (number | null) | Media;
        };
        /**
         * Add one or more columns with items
         */
        columns?:
          | {
              order?: number | null;
              category: string;
              items?:
                | {
                    title: string;
                    description?: string | null;
                    link?: string | null;
                    icon?: (number | null) | Media;
                    id?: string | null;
                  }[]
                | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
        blockName?: string | null;
        blockType: 'megaMenu';
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  logo: number | Media;
  headquarters?:
    | {
        title: string;
        address: string;
        id?: string | null;
      }[]
    | null;
  links?:
    | {
        groupTitle: string;
        items?:
          | {
              label: string;
              url: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  socialLinks?:
    | {
        platform: string;
        url: string;
        icon: number | Media;
        id?: string | null;
      }[]
    | null;
  copyright: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  /**
   * URL-friendly slug automatically generated from the title
   */
  slug: string;
  pagebuilder?:
    | (
        | {
            heading: string;
            subheading?: string | null;
            buttons?:
              | {
                  label: string;
                  url: string;
                  variant?: ('primary' | 'secondary') | null;
                  id?: string | null;
                }[]
              | null;
            logos?:
              | {
                  logo: number | Media;
                  alt?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'hero';
          }
        | {
            heading: string;
            image: number | Media;
            categoryLabel: string;
            title: string;
            description: string;
            primaryButtonLabel?: string | null;
            primaryButtonUrl?: string | null;
            secondaryButtonLabel?: string | null;
            secondaryButtonUrl?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'smarterEvents';
          }
        | {
            tabs: {
              tabLabel: string;
              heading: string;
              description: {
                root: {
                  type: string;
                  children: {
                    type: string;
                    version: number;
                    [k: string]: unknown;
                  }[];
                  direction: ('ltr' | 'rtl') | null;
                  format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                  indent: number;
                  version: number;
                };
                [k: string]: unknown;
              };
              image: number | Media;
              id?: string | null;
            }[];
            buttonLabel?: string | null;
            buttonUrl?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'tabSection';
          }
        | {
            subheading: string;
            heading: string;
            buttonLabel: string;
            buttonUrl: string;
            image: number | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'custom-feature';
          }
        | {
            badge: string;
            title: string;
            subtitle: string;
            features?:
              | {
                  icon: number | Media;
                  headingBlue: string;
                  headingBlack: string;
                  description: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'whyAzavista';
          }
        | {
            badge: string;
            title: string;
            subtitle?: string | null;
            cards?:
              | {
                  category?: string | null;
                  title?: string | null;
                  description?: string | null;
                  image?: (number | null) | Media;
                  link?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'caseStudies';
          }
        | {
            badge?: string | null;
            title: string;
            subtitle?: string | null;
            items?:
              | {
                  quote: string;
                  author: string;
                  role?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'testimonials';
          }
        | {
            title: string;
            description?: string | null;
            buttonLabel?: string | null;
            buttonUrl?: string | null;
            mainLogo?: (number | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'seamless';
          }
        | {
            sectionLabel: string;
            heading: string;
            description: string;
            buttonText: string;
            buttonLink: string;
            backgroundImage: number | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'getstarted';
          }
        | {
            leftTitle: string;
            leftDescription: string;
            submitLabel: string;
            emailPlaceholder: string;
            firstNamePlaceholder: string;
            lastNamePlaceholder: string;
            companyPlaceholder: string;
            countryLabel: string;
            topicLabel: string;
            planningLabel: string;
            consentNewsText: string;
            consentPrivacyText: string;
            privacyUrl: string;
            countryOptions?:
              | {
                  label: string;
                  id?: string | null;
                }[]
              | null;
            topicOptions?:
              | {
                  label: string;
                  id?: string | null;
                }[]
              | null;
            planningOptions?:
              | {
                  label: string;
                  id?: string | null;
                }[]
              | null;
            rightHeading: string;
            features?:
              | {
                  title: string;
                  description: string;
                  id?: string | null;
                }[]
              | null;
            trustHeading: string;
            logos?:
              | {
                  logo: number | Media;
                  alt: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'contact';
          }
        | {
            title?: string | null;
            heading: string;
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            backgroundVariant?: ('none' | 'light') | null;
            cta?: {
              label?: string | null;
              url?: string | null;
              variant?: ('primary' | 'secondary') | null;
            };
            image: number | Media;
            imageOnRight?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'featureSection';
          }
        | {
            title: string;
            heading: string;
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'platformFeature';
          }
        | {
            heading: string;
            description?: string | null;
            buttonText: string;
            buttonUrl: string;
            backgroundColor?: ('bg-blue-600' | 'bg-gray-600') | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'blueSection';
          }
        | {
            heading?: string | null;
            description?: string | null;
            items?:
              | {
                  title: string;
                  description: string;
                  image?: (number | null) | Media;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'integratedTool';
          }
        | {
            title?: string | null;
            items?:
              | {
                  question: string;
                  answer: string;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'faq';
          }
        | {
            /**
             * Optional section title that appears above the main heading
             */
            title?: string | null;
            /**
             * Badge with optional icon and text
             */
            badge?: {
              /**
               * Badge text (e.g., 'Registration Analytics')
               */
              text?: string | null;
              /**
               * Small icon to display before the badge text (SVG/PNG recommended)
               */
              icon?: (number | null) | Media;
            };
            /**
             * Main headline for the section
             */
            heading: string;
            /**
             * Rich text content with bullet points and detailed information
             */
            description?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            backgroundVariant?: ('none' | 'light') | null;
            /**
             * Add up to 2 call-to-action buttons with customizable styles
             */
            buttons?:
              | {
                  label: string;
                  url: string;
                  variant?: ('primary' | 'secondary') | null;
                  id?: string | null;
                }[]
              | null;
            /**
             * Main image for the section (dashboard screenshot, product mockup, etc.)
             */
            image: number | Media;
            /**
             * Toggle to switch the layout between image-left and image-right
             */
            imageOnRight?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'splitFeature';
          }
        | {
            images?:
              | {
                  image?: (number | null) | Media;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'galleryMarquee';
          }
        | {
            heading?: string | null;
            description1?: string | null;
            description2?: string | null;
            image?: (number | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'videoSection';
          }
        | {
            featured: {
              category?: string | null;
              title: string;
              excerpt?: string | null;
              image?: (number | null) | Media;
              /**
               * Enter a slug like how-ai-... or a full URL
               */
              link?: string | null;
            };
            itemsRight?:
              | {
                  category?: string | null;
                  title: string;
                  excerpt?: string | null;
                  image?: (number | null) | Media;
                  /**
                   * Enter a slug like how-ai-... or a full URL
                   */
                  link?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'blogList';
          }
        | {
            searchPlaceholder?: string | null;
            /**
             * Add manual list of types for filtering
             */
            types?:
              | {
                  label: string;
                  id?: string | null;
                }[]
              | null;
            items?:
              | {
                  type?: string | null;
                  category?: string | null;
                  title: string;
                  excerpt?: string | null;
                  image?: (number | null) | Media;
                  link?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'blogGrid';
          }
        | {
            eventTypeLabel?: string | null;
            eventTypes?:
              | {
                  label: string;
                  id?: string | null;
                }[]
              | null;
            regionLabel?: string | null;
            regionsList?:
              | {
                  label: string;
                  id?: string | null;
                }[]
              | null;
            resetLabel?: string | null;
            events?:
              | {
                  title?: string | null;
                  description?: string | null;
                  eventDate?: string | null;
                  eventType?: string | null;
                  region?: string | null;
                  image?: (number | null) | Media;
                  link?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'eventsGrid';
          }
        | {
            heading?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'heading';
          }
        | {
            heading: string;
            description?: string | null;
            buttonText: string;
            buttonUrl: string;
            backgroundImage: number | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'integratedHero';
          }
        | {
            title?: string | null;
            items?:
              | {
                  image?: (number | null) | Media;
                  title: string;
                  description?: string | null;
                  learnMore?: string | null;
                  id?: string | null;
                }[]
              | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'integrateCard';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs".
 */
export interface Blog {
  id: number;
  title?: string | null;
  subtitle?: string | null;
  /**
   * URL-friendly slug automatically generated from the title
   */
  slug?: string | null;
  category?: string | null;
  image?: (number | null) | Media;
  publishedAt?: string | null;
  lastUpdatedAt?: string | null;
  /**
   * Icons and links to display under the title.
   */
  socialIcons?:
    | {
        label?: string | null;
        url?: string | null;
        icon?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  bodyContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'navbar';
        value: number | Navbar;
      } | null)
    | ({
        relationTo: 'footer';
        value: number | Footer;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'blogs';
        value: number | Blog;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  cloudinaryId?: T;
  publicUrl?: T;
  cloudinary?:
    | T
    | {
        public_id?: T;
        resource_type?: T;
        format?: T;
        secure_url?: T;
        bytes?: T;
        created_at?: T;
        version?: T;
        version_id?: T;
        width?: T;
        height?: T;
        duration?: T;
        pages?: T;
        selected_page?: T;
        thumbnail_url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navbar_select".
 */
export interface NavbarSelect<T extends boolean = true> {
  label?: T;
  logo?: T;
  logoUrl?: T;
  ctaLabel?: T;
  ctaUrl?: T;
  menuItems?:
    | T
    | {
        megaMenu?:
          | T
          | {
              label?: T;
              order?: T;
              highlight?:
                | T
                | {
                    title?: T;
                    description?: T;
                    linkText?: T;
                    link?: T;
                    image?: T;
                  };
              columns?:
                | T
                | {
                    order?: T;
                    category?: T;
                    items?:
                      | T
                      | {
                          title?: T;
                          description?: T;
                          link?: T;
                          icon?: T;
                          id?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logo?: T;
  headquarters?:
    | T
    | {
        title?: T;
        address?: T;
        id?: T;
      };
  links?:
    | T
    | {
        groupTitle?: T;
        items?:
          | T
          | {
              label?: T;
              url?: T;
              id?: T;
            };
        id?: T;
      };
  socialLinks?:
    | T
    | {
        platform?: T;
        url?: T;
        icon?: T;
        id?: T;
      };
  copyright?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  pagebuilder?:
    | T
    | {
        hero?:
          | T
          | {
              heading?: T;
              subheading?: T;
              buttons?:
                | T
                | {
                    label?: T;
                    url?: T;
                    variant?: T;
                    id?: T;
                  };
              logos?:
                | T
                | {
                    logo?: T;
                    alt?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        smarterEvents?:
          | T
          | {
              heading?: T;
              image?: T;
              categoryLabel?: T;
              title?: T;
              description?: T;
              primaryButtonLabel?: T;
              primaryButtonUrl?: T;
              secondaryButtonLabel?: T;
              secondaryButtonUrl?: T;
              id?: T;
              blockName?: T;
            };
        tabSection?:
          | T
          | {
              tabs?:
                | T
                | {
                    tabLabel?: T;
                    heading?: T;
                    description?: T;
                    image?: T;
                    id?: T;
                  };
              buttonLabel?: T;
              buttonUrl?: T;
              id?: T;
              blockName?: T;
            };
        'custom-feature'?:
          | T
          | {
              subheading?: T;
              heading?: T;
              buttonLabel?: T;
              buttonUrl?: T;
              image?: T;
              id?: T;
              blockName?: T;
            };
        whyAzavista?:
          | T
          | {
              badge?: T;
              title?: T;
              subtitle?: T;
              features?:
                | T
                | {
                    icon?: T;
                    headingBlue?: T;
                    headingBlack?: T;
                    description?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        caseStudies?:
          | T
          | {
              badge?: T;
              title?: T;
              subtitle?: T;
              cards?:
                | T
                | {
                    category?: T;
                    title?: T;
                    description?: T;
                    image?: T;
                    link?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        testimonials?:
          | T
          | {
              badge?: T;
              title?: T;
              subtitle?: T;
              items?:
                | T
                | {
                    quote?: T;
                    author?: T;
                    role?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        seamless?:
          | T
          | {
              title?: T;
              description?: T;
              buttonLabel?: T;
              buttonUrl?: T;
              mainLogo?: T;
              id?: T;
              blockName?: T;
            };
        getstarted?:
          | T
          | {
              sectionLabel?: T;
              heading?: T;
              description?: T;
              buttonText?: T;
              buttonLink?: T;
              backgroundImage?: T;
              id?: T;
              blockName?: T;
            };
        contact?:
          | T
          | {
              leftTitle?: T;
              leftDescription?: T;
              submitLabel?: T;
              emailPlaceholder?: T;
              firstNamePlaceholder?: T;
              lastNamePlaceholder?: T;
              companyPlaceholder?: T;
              countryLabel?: T;
              topicLabel?: T;
              planningLabel?: T;
              consentNewsText?: T;
              consentPrivacyText?: T;
              privacyUrl?: T;
              countryOptions?:
                | T
                | {
                    label?: T;
                    id?: T;
                  };
              topicOptions?:
                | T
                | {
                    label?: T;
                    id?: T;
                  };
              planningOptions?:
                | T
                | {
                    label?: T;
                    id?: T;
                  };
              rightHeading?: T;
              features?:
                | T
                | {
                    title?: T;
                    description?: T;
                    id?: T;
                  };
              trustHeading?: T;
              logos?:
                | T
                | {
                    logo?: T;
                    alt?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        featureSection?:
          | T
          | {
              title?: T;
              heading?: T;
              description?: T;
              backgroundVariant?: T;
              cta?:
                | T
                | {
                    label?: T;
                    url?: T;
                    variant?: T;
                  };
              image?: T;
              imageOnRight?: T;
              id?: T;
              blockName?: T;
            };
        platformFeature?:
          | T
          | {
              title?: T;
              heading?: T;
              description?: T;
              id?: T;
              blockName?: T;
            };
        blueSection?:
          | T
          | {
              heading?: T;
              description?: T;
              buttonText?: T;
              buttonUrl?: T;
              backgroundColor?: T;
              id?: T;
              blockName?: T;
            };
        integratedTool?:
          | T
          | {
              heading?: T;
              description?: T;
              items?:
                | T
                | {
                    title?: T;
                    description?: T;
                    image?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        faq?:
          | T
          | {
              title?: T;
              items?:
                | T
                | {
                    question?: T;
                    answer?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        splitFeature?:
          | T
          | {
              title?: T;
              badge?:
                | T
                | {
                    text?: T;
                    icon?: T;
                  };
              heading?: T;
              description?: T;
              backgroundVariant?: T;
              buttons?:
                | T
                | {
                    label?: T;
                    url?: T;
                    variant?: T;
                    id?: T;
                  };
              image?: T;
              imageOnRight?: T;
              id?: T;
              blockName?: T;
            };
        galleryMarquee?:
          | T
          | {
              images?:
                | T
                | {
                    image?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        videoSection?:
          | T
          | {
              heading?: T;
              description1?: T;
              description2?: T;
              image?: T;
              id?: T;
              blockName?: T;
            };
        blogList?:
          | T
          | {
              featured?:
                | T
                | {
                    category?: T;
                    title?: T;
                    excerpt?: T;
                    image?: T;
                    link?: T;
                  };
              itemsRight?:
                | T
                | {
                    category?: T;
                    title?: T;
                    excerpt?: T;
                    image?: T;
                    link?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        blogGrid?:
          | T
          | {
              searchPlaceholder?: T;
              types?:
                | T
                | {
                    label?: T;
                    id?: T;
                  };
              items?:
                | T
                | {
                    type?: T;
                    category?: T;
                    title?: T;
                    excerpt?: T;
                    image?: T;
                    link?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        eventsGrid?:
          | T
          | {
              eventTypeLabel?: T;
              eventTypes?:
                | T
                | {
                    label?: T;
                    id?: T;
                  };
              regionLabel?: T;
              regionsList?:
                | T
                | {
                    label?: T;
                    id?: T;
                  };
              resetLabel?: T;
              events?:
                | T
                | {
                    title?: T;
                    description?: T;
                    eventDate?: T;
                    eventType?: T;
                    region?: T;
                    image?: T;
                    link?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        heading?:
          | T
          | {
              heading?: T;
              id?: T;
              blockName?: T;
            };
        integratedHero?:
          | T
          | {
              heading?: T;
              description?: T;
              buttonText?: T;
              buttonUrl?: T;
              backgroundImage?: T;
              id?: T;
              blockName?: T;
            };
        integrateCard?:
          | T
          | {
              title?: T;
              items?:
                | T
                | {
                    image?: T;
                    title?: T;
                    description?: T;
                    learnMore?: T;
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogs_select".
 */
export interface BlogsSelect<T extends boolean = true> {
  title?: T;
  subtitle?: T;
  slug?: T;
  category?: T;
  image?: T;
  publishedAt?: T;
  lastUpdatedAt?: T;
  socialIcons?:
    | T
    | {
        label?: T;
        url?: T;
        icon?: T;
        id?: T;
      };
  bodyContent?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}